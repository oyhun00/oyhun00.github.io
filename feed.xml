<feed xmlns="http://www.w3.org/2005/Atom"> <id>/</id><title>Hoon</title><subtitle>웹 개발과 관련된 기술들을 공부하고 기록하는 블로그입니다.</subtitle> <updated>2025-07-29T09:55:16+09:00</updated> <author> <name>Yong Hoon</name> <uri>/</uri> </author><link rel="self" type="application/atom+xml" href="/feed.xml"/><link rel="alternate" type="text/html" hreflang="en" href="/"/> <generator uri="https://jekyllrb.com/" version="4.2.2">Jekyll</generator> <rights> © 2025 Yong Hoon </rights> <icon>/assets/img/favicons/favicon.ico</icon> <logo>/assets/img/favicons/favicon-96x96.png</logo> <entry><title>JavaScript Memory</title><link href="/posts/javascript-garbage-collection/" rel="alternate" type="text/html" title="JavaScript Memory" /><published>2023-08-15T12:58:00+09:00</published> <updated>2023-08-16T01:09:14+09:00</updated> <id>/posts/javascript-garbage-collection/</id> <content src="/posts/javascript-garbage-collection/" /> <author> <name>yong</name> </author> <category term="JavaScript" /> <category term="Core" /> <summary> JavaScript Memory 자바스크립트에서 메모리 관리는 자바스크립트 엔진에서 자동적으로 관리해준다. 하지만 자바스크립트를 사용하는 개발자라면 어느 정도 이해는 해놔야 될 것 같아 정리하였다. 🔹자바스크립트 메모리 생명 주기 자바스크립트 엔진은 변수나 함수 등을 생성할 때, 메모리를 할당하고 필요하지 않으면 해제한다. 메모리 할당은 말 그대로 메모리에 공간에 할당하는 행위이며, 해제는 할당된 공간을 비워 다른 메모리를 할당한다. Allocate (할당) 자바스크립트에서 생성한 객체에 필요한 메모리를 할당한다. Use (사용) 코드에서 명시적으로 수행되는 작업으로. 변수를 사용하거나 읽는 작업 하며 메모리를 읽고 쓴다. Release (해제) 자바스크립트 엔진에서 사용하지 않는 변... </summary> </entry> <entry><title>Webpack -> Vite Migration</title><link href="/posts/wepback-vite-mitgration/" rel="alternate" type="text/html" title="Webpack -> Vite Migration" /><published>2023-02-07T12:58:00+09:00</published> <updated>2023-02-07T12:58:00+09:00</updated> <id>/posts/wepback-vite-mitgration/</id> <content src="/posts/wepback-vite-mitgration/" /> <author> <name>yong</name> </author> <category term="React" /> <category term="FE Tech" /> <summary> AD Platform Webpack → Vite Migration 회사에서 기존 AD Platform에서 새로운 Feature를 개발하는 도중, 프로젝트 규모 자체가 커서 그런지 HMR과 서버를 재시작하거나 빌드할 때 시간이 상당히 오래 걸렸다. 그 전에 다른 프로젝트에서 Vite를 도입했던 기억이 떠올라 이번엔 Webpack에서 Vite로 마이그레이션을 해보기로 했다. ⚙️ 기존 환경 Dependencies Version react 17.0.2 webpack 4.42.0 🔄 Migration 🔹 Vite Install Vite에서 React 플러그인... </summary> </entry> <entry><title>IAB OpenDirect</title><link href="/posts/iab-open-direct/" rel="alternate" type="text/html" title="IAB OpenDirect" /><published>2022-11-06T12:58:00+09:00</published> <updated>2022-11-17T00:14:36+09:00</updated> <id>/posts/iab-open-direct/</id> <content src="/posts/iab-open-direct/" /> <author> <name>yong</name> </author> <category term="AD Tech" /> <category term="IAB OpenDirect" /> <summary> 해당 포스트는 IAB OpenDirect 공식 문서를 나름 번역하며 공부하고 정리한 글이며 빠진 내용 혹은 오역, 잘못된 내용이 있을 수 있음 🖥️ Open Direct Open Direct를 통해 퍼블리셔가 구매자에게 Open Direct의 표준에 맞춰 구축한 프로그래매틱한 인터페이스를 통해 광고 인벤토리를 제공할 수 있다. 인벤토리란? - 퍼블리셔가 판매할 수 있는 광고 지면, 매체를 뜻함 각 기업 마다의 인터페이스를 통해 구매 및 판매를 전반적으로 걸쳐 재고를 관리한다. 각 구매자와 판매자의 시스템은 인터페이스가 서로 다르기 때문에, 시스템을 통합하기 위해선 많은 리소스를 소요하게 된다. 이를 위해 Open Direct를 통해 광고 인벤토리를 공급자와 수요자가 사용할 수 있게 끔... </summary> </entry> <entry><title>Vite 알아보기</title><link href="/posts/vite/" rel="alternate" type="text/html" title="Vite 알아보기" /><published>2022-10-06T12:58:00+09:00</published> <updated>2022-11-06T22:40:27+09:00</updated> <id>/posts/vite/</id> <content src="/posts/vite/" /> <author> <name>yong</name> </author> <category term="React" /> <category term="FE Tech" /> <summary> Vite ✏️ Vite란? 빠르다, 날쌔다, 신속하다. Vite는 프랑스어로 빠르다라는 뜻이 있다. 웹 어플리케이션의 빌드를 도와주는 도구인데, 말 그대로 빠른 속도로 빌드를 도와준다. 공식 문서에서는 두 가지의 컨셉을 잡고 있다고 한다. 개발 시 네이티브 ES Module을 넘어 더욱 다양한 기능을 제공합니다. 가령, Hot Module Replacement (HMR)과 같은 것들 말이죠. 번들링 시, Rollup 기반의 다양한 빌드 커맨드를 사용할 수 있습니다. 이는 높은 수준으로 최적화된 정적(Static) 리소스들을 배포할 수 있게끔 하며, 미리 정의된 설정(Pre-configured)을 제공합니다. 보통 리액트를 초기 구성할 때, 자바스크립트로 이루어진... </summary> </entry> <entry><title>옵저버 패턴을 리액트에서 사용해보기</title><link href="/posts/design-pattern-observer-in-react/" rel="alternate" type="text/html" title="옵저버 패턴을 리액트에서 사용해보기" /><published>2022-08-29T12:58:00+09:00</published> <updated>2022-11-17T00:12:17+09:00</updated> <id>/posts/design-pattern-observer-in-react/</id> <content src="/posts/design-pattern-observer-in-react/" /> <author> <name>yong</name> </author> <category term="Design Pattern" /> <category term="React" /> <summary> 🔗 옵저버 패턴 알아보기 https://oyhun00.github.io/posts/design-pattern-behavioral-observer/ 상태가 변하는 특정 객체를 관찰자(옵저버)들이 관찰(구독)하고, 특정 객체에서 상태의 변화가 나타날 때 자신을 구독하고 있는 옵저버들에게 상태가 변화 됐음을 알려주는(발행) 발행/구독 패턴이다. 저번에 작성한 옵저버 패턴을 기반으로 리액트에 적용해보자. 🛎️ 버튼 클릭 시, 여러 이벤트를 실행하는 인터랙션 만들기 사용자가 버튼을 클릭할 때, 알림창과, 토스트 알림 그리고 행동을 기록하기 위해 로그를 남기는 인터랙션을 구현해보자. 다음은 Subject 클래스와 인터페이스이다. interface Subject { subscribe(obs: Obser... </summary> </entry> </feed>
